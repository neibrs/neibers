<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\user\RoleInterface;

/**
 * Implements hook_entity_access().
 */
function entity_permission_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $entities = \Drupal::config('entity_permission.settings')->get('entities');
  if (!$entities) {
    return AccessResult::neutral();
  }

  $entity_type_id = $entity->getEntityTypeId();
  if (!isset($entities[$entity_type_id])) {
    return AccessResult::neutral();
  }
  if (!$entities[$entity_type_id]['entity_permission']) {
    return AccessResult::neutral();
  }

  /** @var \Drupal\user\RoleInterface[] $roles */
  $roles = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple($account->getRoles());
  foreach ($roles as $role) {
    if (!$settings = $role->getThirdPartySetting('entity_permission', 'entities')) {
      continue;
    }
    if (!isset($settings[$entity_type_id])) {
      continue;
    }
    if ($settings[$entity_type_id][$operation]) {
      if (!$entities[$entity_type_id]['bundle_permission']) {
        return AccessResult::allowed();
      }
      // Check bundle permission
      $bundle = $entity->bundle();
      if (!isset($settings[$entity_type_id]['bundle_permission'][$bundle])) {
        return AccessResult::allowed();
      }
      if ($settings[$entity_type_id]['bundle_permission'][$bundle][$operation]) {
        return AccessResult::allowed();
      }
    }
  }

  return AccessResult::forbidden();
}

/**
 * Implements hook_entity_create_access().
 */
function entity_permission_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  $entities = \Drupal::config('entity_permission.settings')->get('entities');
  if (!$entities) {
    return AccessResult::neutral();
  }

  $entity_type_id = $context['entity_type_id'];
  if (!isset($entities[$entity_type_id])) {
    return AccessResult::neutral();
  }
  if (!$entities[$entity_type_id]['entity_permission']) {
    return AccessResult::neutral();
  }

  /** @var \Drupal\user\RoleInterface[] $roles */
  $roles = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple($account->getRoles());
  foreach ($roles as $role) {
    if (!$settings = $role->getThirdPartySetting('entity_permission', 'entities')) {
      continue;
    }
    if (!isset($settings[$entity_type_id])) {
      continue;
    }
    if ($settings[$entity_type_id]['create']) {
      if (!$entities[$entity_type_id]['bundle_permission']) {
        return AccessResult::allowed();
      }
      // Check bundle permission
      if (!isset($settings[$entity_type_id]['bundle_permission'][$entity_bundle])) {
        return AccessResult::allowed();
      }
      if ($settings[$entity_type_id]['bundle_permission'][$entity_bundle]['create']) {
        return AccessResult::allowed();
      }
    }
  }

  return AccessResult::forbidden();
}

/**
 * Implements hook_entity_field_access().
 */
function entity_permission_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  $entities = \Drupal::config('entity_permission.settings')->get('entities');
  if (!$entities) {
    return AccessResult::neutral();
  }

  $entity_type_id = $field_definition->getTargetEntityTypeId();
  if (!isset($entities[$entity_type_id])) {
    return AccessResult::neutral();
  }
  if (!$entities[$entity_type_id]['field_permission']) {
    return AccessResult::neutral();
  }

  /** @var \Drupal\user\RoleInterface[] $roles */
  $roles = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple($account->getRoles());
  foreach ($roles as $role) {
    if (!$settings = $role->getThirdPartySetting('entity_permission', 'entities')) {
      continue;
    }
    if (!isset($settings[$entity_type_id]['field_permission'][$field_definition->getName()])) {
      continue;
    }
    if ($settings[$entity_type_id]['field_permission'][$field_definition->getName()][$operation]) {
      return AccessResult::allowed();
    }
  }

  return AccessResult::forbidden();
}

/**
 * Implements hook_entity_operation().
 */
function entity_permission_entity_operation(EntityInterface $entity) {
  $operations = [];

  if ($entity instanceof RoleInterface) {
    $operations['entity_permission'] = [
      'title' => t('Edit entity permissions'),
      'url' => Url::fromRoute('entity.user_role.entity_permission', [
        'user_role' => $entity->id(),
      ]),
      'weight' => 20,
    ];
  }

  return $operations;
}
