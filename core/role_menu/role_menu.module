<?php

/**
 * @file
 * Contains role_menu.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\user\RoleInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter() for user_role_form.
 */
function role_menu_form_user_role_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\user\RoleInterface $role */
  $role = $form_state->getFormObject()->getEntity();

  $entities = \Drupal::service('entity_type.manager')->getStorage('menu')->loadMultiple();
  $options = array_map(function ($item) {
    return $item->label();
  }, $entities);
  $form['role_menu'] = [
    '#type' => 'select',
    '#title' => t('Role menu'),
    '#empty_value' => '',
    '#default_value' => $role->getThirdPartySetting('role_menu', 'menu', ''),
    '#options' => $options,
  ];

  $form['#entity_builders'][] = 'role_menu_form_user_role_form_entity_builder';
}

/**
 * Entity builder for role_menu on the user role form.
 *
 * @see role_menu_form_user_role_form_alter()
 */
function role_menu_form_user_role_form_entity_builder($entity_type_id, RoleInterface $role, &$form, FormStateInterface $form_state) {
  $new_value = $form_state->getValue('role_menu', '');
  $role->setThirdPartySetting('role_menu', 'menu', $new_value);
}

/**
 * Implements hook_entity_operation().
 */
function role_menu_entity_operation(EntityInterface $entity) {
  $operations = [];

  if ($entity->getEntityTypeId() == 'user_role') {
    $menu_id = $entity->getThirdPartySetting('role_menu', 'menu', '');
    if (!empty($menu_id)) {
      $operations[] = [
        'title' => t('Edit role menu'),
        'url' => Url::fromRoute('entity.menu.edit_form', ['menu' => $menu_id]),
        'weight' => 30,
      ];
    }
  }

  return $operations;
}
