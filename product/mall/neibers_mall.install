<?php

/**
 * @file
 */

use Drupal\commerce_payment\Entity\PaymentGateway;
use Drupal\commerce_product\Entity\Product;
use Drupal\commerce_product\Entity\ProductVariation;
use Drupal\commerce_product\Entity\ProductVariationType;
use Drupal\commerce_recurring\Entity\BillingSchedule;
use Drupal\commerce_store\Entity\Store;

/**
 * Implements hook_install().
 */
function neibers_mall_install() {
  // Init Store for neibers_mall.
  $store = Store::create([
    'name' => t('Default Store Name'),
    'mail' => 'admin@localhost',
    'type' => 'online',
    'default_currency' => 'CNY',
  ]);
  $store->save();

  /** @var \Drupal\commerce\EntityTraitManagerInterface $trait_manager */
  $trait_manager = \Drupal::service('plugin.manager.commerce_entity_trait');
  $trait = $trait_manager->createInstance('purchasable_entity_subscription');
  $trait_manager->installTrait($trait, 'commerce_product_variation', 'default');

  $commerce_product_variation_type = ProductVariationType::load('default');
  $commerce_product_variation_type->setTraits(['purchasable_entity_subscription']);
  $commerce_product_variation_type->save();

  // Add demo billing schedule
  $billingschedule = BillingSchedule::create([
    'id' => 'prepaybyweekaftertry',
    'label' => 'PrepayByWeekAfterTry',
    'displayLabel' => 'PrepayByWeekAfterTry',
    'billingType' => BillingSchedule::BILLING_TYPE_PREPAID,
    'retrySchedule' => [1, 3, 5],
    'unpaidSubscriptionState' => 'canceled',
    'plugin' => 'fixed',
    'configuration' => [
      'trial_interval' => [
        'number' => '3',
        'unit' => 'hour',
      ],
      'interval' => [
        'number' => '1',
        'unit' => 'week',
      ],
      'start_month' => 1,
      'start_day' => 1,
    ],
    'prorater' => 'full_price',
    'proraterConfiguration' => [],
    'status' => TRUE,
  ]);
  $billingschedule->save();

  $product_variation = ProductVariation::create([
    'type' => 'default',
    'sku' => 'test1',
    'price' => [
      'number' => '39.99',
      'currency_code' => 'USD',
    ],
    'billing_schedule' => $billingschedule->id(),
    'subscription_type' => [
      'target_plugin_id' => 'product_variation',
    ],
  ]);
  $product_variation->save();

  $product = Product::create([
    'type' => 'default',
    'title' => '配置一',
    'variations' => [$product_variation->id()],
    'stores' => [$store->id()],
  ]);
  $product->save();

  // Add payment on-site.
  $paymentGateway = PaymentGateway::create([
    'id' => 'example',
    'label' => 'Example',
    'plugin' => 'example_onsite',
    'configuration' => [
      'api_key' => '2323',
      'display_label' => 'Example',
      'mode' => 'test',
      'payment_method_types' => [
        'credit_card',
      ],
    ],
  ]);
  $paymentGateway->save();


  // Init order type workflow.
  /** @var \Drupal\commerce_order\Entity\OrderTypeInterface $commerce_order_type_default */
  $commerce_order_type_default = \Drupal::entityTypeManager()->getStorage('commerce_order_type')->load('default');
  $commerce_order_type_default->set('workflow', 'neibers_mall_validation')
    ->save();

  // Init import currency RMB
  if (!\Drupal::isConfigSyncing()) {
    $default_country = \Drupal::config('system.date')->get('country.default');
    $default_country = $default_country ?: 'CN';
    $currency_importer = \Drupal::service('commerce_price.currency_importer');
    $currency_importer->importByCountry($default_country);
  }
}
